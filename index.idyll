[meta title:"Cs4474project" description:"Short description of your project" /]

[Header
  fullWidth:true
  title:"Data Structure Visualizer"
  subtitle:"CS4474 Group 9"
  author:"Yonatan Alexander, Nolan Morris, Michael Tang-Tran, and Khanh Linh (Erin) Vu "
  authorLink:"https://github.com/uwohci23/group-9-project.git"
  date:"April 6th, 2023"
  background:"#222222"
  color:"#ffffff"
   /]

[var name:"x" value:0 /]


# Table of Contents
[ol]
  [li] [Executive Summary](#executive-summary) [/li]
  [li] [Navigational Map](#navigational-map)[/li]
  [li] [Employed Design Principles](#employed-design-principles)  [/li]
  [li] [Evaluation](#evaluation)[/li]
  [li] [List of Recommendations for Improvement](#list-of-recommendations-for-improvement)[/li]
  [li] [Resources and References](#resources-and-references) [/li]
[/ol]


## Executive Summary 

[p]As students embark on their computer science journey, they inevitably encounter tree structures. Tree algorithms, encompassing insertion, deletion, balancing, rebalancing, and searching, can be complex and many find them overwhelming. Many students benefit from hands-on learning experiences, and visualizers provide an effective way to understand these algorithms through animations. One popular visualizer is a [website](https://www.cs.usfca.edu/~galles/visualization/Algorithms.html) by David Galles at the University of San Francisco, which offers visualizations for numerous algorithms. However, this tool contains design flaws, has dated design, and is missing some key features, all of which hinder its effectiveness as a learning tool, forcing users to rely on supplemental applications for their learning. Our redesign aims to address those weaknesses and provide a more comprehensive learning experience.[/p]

[p]We integrated the visualizer with lessons and quiz questions to create a multimedia interface, eliminating the need for supplemental applications. The design of the user interface (UI) has been reworked to be clearer and more intuitive. Elements are grouped together more cohesively, and some are hidden under drop-down menus for a cleaner interface. We improved navigation by adding menus for smoother transitions between different tools.[/p]

[p]An important improvement happens in the input boxes themselves. They no longer have hidden affordances, and they can accept a wider range of characters, restricted to integer values only to avoid confusion. Furthermore, we have improved the visual design, updated it with React, and added a learning module to enhance the emotional and affective experience.[/p]

[p]During the redesign process, we faced several design challenges, such as evaluating and iterating on the UI design, leading to the final version being selected after multiple models were examined. We also encountered issues with multi-value input working faster than the animation code, which required adjustments to the animation delay.[/p]

[p]We have incorporated explanations, code, and pseudocode alongside the visualizer to facilitate a deeper understanding of the algorithms being studied. A quiz section allows users to reinforce their learning, while a dedicated section for reviewing specific algorithms offers detailed explanations and time complexity analyses.[/p]

[p]These improvements significantly enhance the user experience by creating a more organized and visually appealing interface. Additionally, the added learning support features amplify the visualizer's effectiveness, enabling users to achieve their learning goals more efficiently. Despite the challenges faced during the redesign, our redesigned website offers a more intuitive and comprehensive learning experience for users seeking to master tree algorithms.[/p]

## Navigational Map 

This is the lesson plan storyboard:
[var name:"showChart" value:false /]

[Button onClick:`showChart = !showChart`]
  [Display value:`showChart ? 'Hide lesson storyboard' : 'Show lesson storyboard' ` /]
[/Button]

[Conditional if:`showChart`]
  ![lessonPlan](./static/images/0.png)
[/Conditional]

This is the quiz plan storyboard:
[var name:"showChart1" value:false /]

[Button onClick:`showChart1 = !showChart1`]
  [Display value:`showChart1 ? 'Hide quiz storyboard' : 'Show quiz storyboard' ` /]
[/Button]

[Conditional if:`showChart1`]
  ![quizPlan](./static/images/1.png)
[/Conditional]

This is the visualizer storyboard:
[var name:"showChart2" value:false /]

[Button onClick:`showChart2 = !showChart2`]
  [Display value:`showChart2 ? 'Hide visualizer storyboard' : 'Show visualizer storyboard' ` /]
[/Button]

[Conditional if:`showChart2`]
  ![visualizer](./static/images/2.png)
[/Conditional]




## Employed Design Principles 

We have 24 design principles incorporated into our project: 




### 1. Closure:

[p]We applied the Gestalt law of closure by incorporating a progress bar on our learning pages. This progress bar provides users with an overview of their learning progress, helping them understand how far they have come and how much further they need to go. This improves the user experience by creating a sense of achievement and motivation as users work through the learning materials.[/p]
![Alt Text](./static/images/gifs/multimediaTutorial.gif)
### 2. Common Fate

[p]To enhance the user experience, we designed our practice curriculum to follow a left-to-right layout, maintaining consistency and cohesion. We begin with introductory lessons on the left, followed by practice sessions in the middle, and conclude with a multi-level quiz session on the right. This allows users to easily understand the sequence of steps they need to follow to complete the course.[/p]

### 3. Continuity

[p]We ensured continuity in our design by guiding users through the content in a vertical format. A vertical slider helps users navigate the learning materials seamlessly, providing a clear and consistent learning path.[/p]

### 4. Proximity

[p]We applied the Gestalt law of proximity by grouping similar components together in our menu. For example, insertion and deletion information are displayed alongside their respective diagram GIFs, making it easier for users to find and understand the information they need.[/p]
![spacing](./static/images/designPrinciples/spacingAndControl.PNG)

### 5. Similarity

[p]To improve usability, we formatted our content in a familiar and consistent manner, allowing users to easily recognize and interact with clickable elements, such as quiz buttons. We made sure that the components had consistent subcomponents. For example, the quizzes had the same format, length, and interface. [/p]

### 6. Symmetry

[p]We had symmetry present in our lessons and homepage. The symmetry was consistent so users would recognize symbols and text easily.[/p]
![Alt Text](./static/images/gifs/symmetry.gif)
[p]In our quizzes, we maintained symmetry by displaying four possible quiz answers equally distributed on each side. This balanced layout enhances the user experience by creating a visually pleasing and organized interface.[/p]

### 7. Externalization of Information

[p]We designed our system with specific visual appearances for each type of object, making it easy for users to understand their intended use. For example, multimedia content is designed to be read and viewed, while practice components feature clearly identifiable play and input fields.[/p]

### 8. Visibility

[p]To avoid overwhelming users, we focused on providing only the necessary information and tools, ensuring a streamlined and straightforward experience. Users would only see lessons in the lesson categories, practice visualizers in the visualizer section, and 1 quiz question at a time in the quiz section.[/p]

### 9. Principle of Familiarity

[p]We enabled users to input data according to their preferences by allowing manual entry, either one-by-one or in multi-set format in the visualizer. For the multi-set format, we allowed strings with integers separated by commas, spaces, or both. [/p]

####Examples:

#####Example 1:
[var name:"myVar" value:false /]

[Boolean value:myVar /]

Input: [Display value:`myVar ? "1, 2, 3, 4, 5" : "Click checkbox to see the values."  `/]

#####Example 2:

[var name:"myVar1" value:false /]

[Boolean value:myVar1 /]

Input: [Display value:`myVar1 ? "1,2,3,4,5" : "Click checkbox to see the values."  `/]

#####Example 3:

[var name:"myVar3" value:false /]

[Boolean value:myVar3 /]

Input: [Display value:`myVar3 ? "1 2 3 4 5" : "Click checkbox to see the values."  `/]

Users are familiar entering input strings in those common formats. The system allows them to do this in the visualizer.

### 10. Affordance Principle

[p]We utilized affordances in our design, such as providing back and forward navigation options in the quiz section, helping users understand how to navigate through the content.[/p]

### 11. User Interface Affordance

[p]We designed our interface so users can only interact with one option at a time in quizzes, practices, and lessons, ensuring a clear and focused experience.[/p]

### 12. Static vs Dynamic Affordance

[p]Our project includes static affordances like buttons for interaction in quizzes and practice sections, making it easy for users to understand and interact with the interface.[/p]
![Alt Text](./static/images/gifs/animationSpeed.gif)
### 13. Constraints

[p]We implemented physical constraints to make the system more robust against user error. For example, we allow users to be able to pick only 4 quiz answers and 3 possible quiz navigation choices, enhancing the user experience. We also introduced psychological constraints through menus, guiding users to interact with the interface in specific ways. These constraints allow us to guide the user to predictable behaviors. [/p]

### 14. Chunking

[p]We separated learning material into manageable chunks and grouped related content together, following the Law of Proximity, making it easier for users to understand and digest the information. For example, we separated the components of the learning section into distinctive parts. The introduction, insertion, deletion, searching, and comparison parts are separated to present the relevant information. Another example would be the quizzes only allow users to see one question in a page. These examples allow us to make the information digestable and easy to manage.[/p]

### 15. Mapping

[p]We organized information on learning, practice, and quiz pages into distinct categories, allowing users to make clear choices about the topics they wish to learn, practice, or evaluate. Users can pick the four data structure topics that we allow them to see in each component.[/p]

### 16. Confirmation

[p]To prevent unintended actions, we provide visual feedback and prompts for users to confirm their input selections or to cancel their actions if necessary.[/p]
This is an example of the reset button message in the visualizer section, but when you
 [action onClick:`alert('If you click ok, you will reset all inputs. Are you sure? ')`]click me[/action],
an alert will appear.

### 17. Progressive Disclosure

[p]We designed our content to display only necessary and requested information at any given time, presenting one page at a time for lessons, practice, and quizzes, reducing cognitive load on users. The system presents one question for a quiz, one topic for the lesson, or one data structure for the practice component.[/p]

### 18. Consistency

[p]Our application maintains consistency throughout its various sections, such as learning pages with uniform multimedia presentations, practice sections using the same user interface tool for visualization, and quizzes following a consistent format. This ensures a coherent and predictable user experience, making it easier for users to navigate and interact with the content.[/p]

### 19. Transfer

[p]We designed our application to follow a traditional learning process, similar to how a textbook presents information. The app starts with an introduction, followed by practice simulations and evaluations at the end. This familiar layout helps users better understand and engage with the learning materials. Users can pick and choose where they go to help guide their data structure knowledge.[/p]

### 20. Garbage In - Garbage Out

[p]To maintain input quality, we restricted user data entry to specific areas, such as learning and quiz pages. Users can only interact with the learning and quiz pages by clicking the buttons and links.  By limiting input options, we ensure that the quality of the system's input remains high.[/p]

### 21. Control

[p]We designed our application to give users control over quiz difficulty and the pace of data input. These features allow users to tailor the learning experience to their individual expertise and preferences.[/p]
![quizDifficulty](./static/images/quizDifficulty.png)

### 22. Feedback

[p]We incorporated feedback messages to inform users of their progress within the learning pages. Additionally, we provided feedback on all quiz question and the end of the quiz. This quiz feedback provides the answer immediately, and a score after the user is done the quiz.[/p]

Users will be informed when get the wrong or right answer. 

[var name:"showChart4" value:false /]

[Button onClick:`showChart4 = !showChart4`]
  [Display value:`showChart4 ? 'Hide wrong answer' : 'Show wrong answer' ` /]
[/Button]

[Conditional if:`showChart4`]
  ![wrong answer](./static/images/designPrinciples/wrongAnswer.png)
[/Conditional]

[var name:"showChart5" value:false /]

[Button onClick:`showChart5 = !showChart5`]
  [Display value:`showChart5 ? 'Hide right answer' : 'Show right answer' ` /]
[/Button]

[Conditional if:`showChart5`]
  ![quizPlan](./static/images/designPrinciples/rightAnswer.png)
[/Conditional]

Users will be displayed their score. 
[var name:"showChart6" value:false /]

[Button onClick:`showChart6 = !showChart6`]
  [Display value:`showChart6 ? 'Hide score' : 'Show score'  ` /]
[/Button]

[Conditional if:`showChart6`]
  ![score](./static/images/designPrinciples/score.png)
[/Conditional]

From these feedback images and messages, users would be given clear and instantaneous feedback on their performance. Thus, users can be better informed on where their knowledge can improve.



### 23. Causality

[p]Our design establishes causality by providing clear outcomes and next steps following each operation. For instance, when a user finishes a quiz question, we suggest possible next actions. Similarly, after adding input to an animation, users can see the completed or final state.[/p]

### 24. Hick's Law

[p]To simplify decision-making for users, we limited the number of choices available for data structures, quiz options, and learning paths to four. This streamlined selection process allows users to make quick and efficient decisions.[/p]

# Evaluation 

## Analytical Evaluation
### 1. Description
After one of our group members finished developing a feature, we would run user simulations on the task. We would provide feedback to the developer on the quality and performance of the feature. As a result, the developer would continue performing improvements to their work until there was high enough ratings from the other group members.  

### 2. A B Testing
We did some AB testing to see the best demonstration of user using a feature. A specific example would be the quiz format. We explored multiple choice buttons versus radio buttons. We realized that multiple choice was the better option after getting feedback from some group members pretending to be users. 

### Analysis
After the analytical evaluation and feedback was complete, it was not sufficient to simply conduct analytical simulations. We knew that heuristic evaluations needed to be conducted in order to achieve a well-designed system.

## Detailed Heuristic Evaluation

### 1. Visibility of System Status

#### 1.1 Progress Tracking

[p]We use visual displays to inform users of their current position within the system. For example, we include a progress bar on learning pages, practice sessions, and quizzes, giving users a clear sense of their progress and how much more they need to complete. Additionally, we provide visual cues such as color changes, animations, and tooltips to communicate the state of buttons and interactions.[/p]




#### 1.2 Next Steps

[p]Upon completion of a task or feature, we guide users on the next steps in the process. For instance, after finishing a quiz question, we suggest potential actions, such as reviewing previous questions, moving to the next question, or accessing additional learning resources.[/p]

#### 1.3 Slow Response Time

[p]An unfortunate side effect of adding the ability to add multiple nodes at the same time, we had to increase the response time significantly to ensure the animation works well (also related to point 2.3 in this list). This delayed response time between inputs and visual feedback could lead to user frustration and a diminished learning experience.[/p]

### 2. Match Between the System and the Real World

#### 2.1 Familiar Terminology

[p]Our system employs traditional terminology and concepts found in data structure learning websites, courses, and textbooks. We avoid using jargon or technical terms that may confuse or alienate users, instead opting for language that is clear, concise, and relatable to users with varying levels of expertise.[/p]

#### 2.2 Real-World Mapping

[p]We designed our system's features to align with real-world processes and workflows. The learning materials, practice sessions, and quizzes are organized in a manner that mimics the progression of a traditional textbook or course, enabling users to feel more at ease while navigating the system.[/p]

#### 2.3 Dated Language Framework

[p]The current code is based on dated code libraries, however to improve this aspect would require rewriting the entire code, from scratch. This dated framework means the system is clumsy and appears dated. An overhaul of the entire system using a modern framework would have helped us in improving performance, optimizing the algorithms and visualizations to reduce response times, create a smoother user experience, and modernize the overall look and feel of the system.[/p]

### 3. User Control & Freedom

#### 3.1 Navigation Flexibility

[p]We allow users to move freely between distinct areas of the system, including learning materials, practice sessions, and quizzes. Backward and forward navigation options are provided, enabling users to revisit previous sections or change their responses at any time.[/p]

#### 3.2 Undo Functionality

[p]To further empower users, we include undo functionality that allows them to correct perceived mistakes or revert to a previous state. This enhances the user experience by fostering a sense of control and confidence while navigating the system.[/p]

#### 3.3 Missing Features

##### 3.3.1 Missing Direct Interaction Feature

[p]There is no way to interact with the tree directly by pressing on various nodes (for example, right-clicking to have a drop-down menu which would allow to delete a node, or print the path to it, etc.). This feature cannot be added without first modfying the entire code to work with a modern library for the purpose of animation and otherwise. Despite this, having such a feature would have given users the opportunity of a more hands-on experience when learning about tree structures, and would have increased the emotional investment.[/p]

##### 3.3.2 Missing Tree Merging Feature

[p]The ability to merge two trees. This could be an essential function for users who want to explore advanced tree manipulation techniques. Incorporating this feature will provide a more comprehensive learning experience for advanced users.[/p]

##### 3.3.3 Missing Advanced Tree Building Quiz

[p]An advanced tree building quiz where the user gets a question such as "how would a tree look if we add 6, 8, 1, 3, 11, 5, in this order, to an empty tree?". Such questions would help deepen users' understanding of tree structures and their manipulation and provide a more challenging and engaging learning experience for users who have already mastered basic tree concepts.In the current framework, adding this feature would be very difficult.[/p]

##### 3.3.4 Missing Tree Saving Feature

[p]Storing the existing tree to memory so the user will have the option of using it when opening the page the next time (likely through cookies). This would allow users to save their progress and continue working on their tree structures at a later time. Adding this feature could improve user satisfaction and provide a more personalized learning experience.[/p]

##### 3.3.5 Missing Tree Comparison Feature

[p]The ability to compare various algorithm and trees is missing. Comparing trees can help users understand the differences between various tree structures and their respective properties. Implementing this feature could facilitate deeper understanding and analysis of tree structures.[/p]

##### 3.3.6 Missing Accessibility Support

[p]At the current time, there is inadequate accessibility support, limiting the usability of our system for users with visual impairments or other accessibility needs. It is essential to incorporate accessibility features to create a more inclusive learning experience.[/p]

##### 3.3.7 Implementing the Updates for the Remaining Tools

[p]As there are over 4 dozen tools, we did not have the time or ability to modify them all, and had to concentrate on specific ones. Updating the remaining tools would improve consistency and overall quality.[/p]

### 4. Consistency and Standards

#### 4.1 Internal Consistency

[p]We maintain internal consistency within our learning application by adopting a uniform content layout across all pages. For example, learning pages follow the same structure for introduction, insertion, and deletion order, and each subsection includes a block of text accompanied by a GIF visual to explain and demonstrate the process.[/p]

#### 4.2 External Consistency

[p]Our application adheres to established design principles and conventions commonly found in other websites, applications, and resources related to data structures. This external consistency ensures that users find our system intuitive and easy to use, as it aligns with their existing mental models and expectations.[/p]

### 5. Error Prevention

#### 5.1 Undo and Backward Functionality

[p]In addition to the backward navigation mentioned earlier, we provide users with the ability to undo certain actions, such as changing quiz responses or modifying input in practice sections. This feature helps prevent errors by allowing users to correct their mistakes without penalty or frustration.[/p]

#### 5.2 Clear and Confirmation Prompts

[p]To further minimize the likelihood of errors, we incorporate clear prompts asking users to confirm or cancel certain actions, such as resetting their quiz responses. This added layer of verification ensures that users fully understand the consequences of their actions and have the opportunity to change their minds if necessary.[/p]

### 6. Recognition vs. Recall in User Interfaces

#### 6.1 Familiar Interface Elements

[p]Our system utilizes familiar interface elements, such as menus, buttons, and input fields, which allows users to quickly recognize and interact with these components. By adopting well-established conventions, we reduce the need for users to recall previous experiences and make the interface more intuitive.[/p]

#### 6.2 Information Availability

[p]We provide users with the appropriate amount of information needed to complete tasks and interact with the system effectively. For instance, buttons for playing visualizations, adjusting animation speed, and managing insertion/deletion/search fields are all clearly labeled and accompanied by tooltips or descriptive text. This approach ensures that users have the necessary context to make informed decisions while using the system.[/p]

### 7. Flexibility and Efficiency of Use

#### 7.1 Unrestricted Access to Components

[p]Our system allows users to access any component—learning sections, practice modules, or quizzes—at their own discretion. We do not impose a strict progression path, enabling users with varying levels of expertise to choose the content that is most relevant to their needs and interests.[/p]

![Navigation Bar](./static/images/navBar.PNG)


#### 7.2 Tailored Experience

[p]We enable users to tailor their learning experience by offering customizable settings, such as animation speed and quiz difficulty. These options cater to different learning preferences, ensuring that users can interact with the system in a way that best suits their individual needs.[/p]

[Annotation]
  [Graphic]
    This is our quiz difficulty setting!
    [img src:"./static/images/quizDifficulty.png" /]
    All quizzes have two different settings.
  [/Graphic]

  Quiz annotation!
[/Annotation]

### 8. Aesthetic and Minimalist Design

#### 8.1 Clear Information Hierarchy

[p]We display only the relevant information that users need to accomplish their tasks in each section. By adopting a clear information hierarchy and separating content into distinct sections—such as quizzes, practice, and learning materials—we create a clean and uncluttered interface that is easy to navigate and understand.[/p]

#### 8.2 Visual Consistency

[p]Our design employs consistent visual elements, such as color schemes, typography, and iconography, throughout the system. This unified aesthetic contributes to a professional and cohesive user experience, helping users to focus on the content rather than being distracted by inconsistent visuals.[/p]

### 9. Help Users Recognize, Diagnose, and Recover from Errors

#### 9.1 Error Recovery Options

[p]We provide users with the ability to recover from errors by offering options to reset inputs, answers, or other actions. By giving users the opportunity to correct their mistakes, we promote a positive user experience and ensure that users do not become frustrated or disheartened.[/p]
[Annotation]
  [Graphic]
    This is our reset button!
    [img src:"./static/images/tutorial.png.png" /]
    Cool, huh?
  [/Graphic]

  Reset annotation!
[/Annotation]

#### 9.2 Informative Error Messages
[p]When errors do occur, we display informative and actionable error messages that help users understand the cause of the issue and suggest possible solutions. This approach empowers users to address errors effectively and minimizes confusion or frustration.[/p]
[Annotation]
  [Graphic]
    This is our error message!
    [img src:"./static/images/resetButtonConfirmation.PNG" /]
    informative, huh?
  [/Graphic]

  Tutorial annotation!
[/Annotation]


### 10. Help & Documentation

#### 10.1 Multimedia Tutorials

[p]We offer multimedia tutorials that guide users on how to use the system, particularly in relation to practice sessions and quizzes. These tutorials feature concise and concrete step-by-step instructions, accompanied by visuals or animations to demonstrate each step.[/p]
![Alt Text](./static/images/gifs/multimediaTutorial.gif)

#### 10.2 Accessible Help Resources

[p]Our help resources are easily accessible and well-organized, ensuring that users can quickly find the information they need to resolve any issues or questions they may have. By providing clear and comprehensive documentation, we empower users to make the most of our system and overcome any obstacles they encounter.[/p]

[Annotation]
  [Graphic]
    This is our tutorial!
    [img src:"./static/images/tutorial.png.png" /]
    Cool, huh?
  [/Graphic]

  Tutorial annotation!
[/Annotation]

## List of Recommendations for Improvement

Considering the entire report and specific final evaluation, the following recommendations can be made for improving the system:

[ol]
[li]Update the entire codebase: Modernize the system by rewriting the entire code using a modern framework like React or Angular. This would result in improved performance, reduced response times, smoother user experience, and a more contemporary look and feel.[/li]
[li]Add direct interaction features: Implement the ability to interact directly with the tree by selecting nodes, offering options like deleting nodes or displaying the path to the selected node. This would enhance the hands-on learning experience and increase emotional investment.[/li]
[li]Introduce tree merging feature: Enable users to merge two trees, allowing them to explore advanced tree manipulation techniques and catering to advanced users.[/li]
[li]Incorporate advanced tree-building quizzes: Develop quizzes that involve advanced tree-building tasks, deepening the understanding of tree structures and their manipulation and providing more challenging and engaging learning experiences.[/li]
[li]Implement a tree saving feature: Allow users to save their current tree structures so they can continue working on them later, providing a more personalized learning experience.[/li]
[li]Add a tree comparison feature: Include the ability to compare different algorithms and trees, which would facilitate deeper understanding and analysis of tree structures.[/li]
[li]Improve accessibility support: Enhance the system's accessibility features to cater to users with visual impairments or other accessibility needs, creating a more inclusive learning experience.[/li]
[li]Complete the updates for the remaining tools: Ensure consistency and overall quality by updating all tools in the system.[/li]
[li]By addressing these recommendations, the system can be significantly improved and provide an even more comprehensive and intuitive learning experience for users looking to master tree algorithms.[/li]
[/ol]

## Resources and References

[ol]
  [li][Data Visualization Website Code and interface](https://www.cs.usfca.edu/~galles/visualization/about.html)[/li]
  [li][Github Repository](https://github.com/uwohci23/group-9-project.git)[/li]
  [li][Learn programmingfor free. Programiz. (n.d.). Retrieved April 6, 2023, from https://www.programiz.com/ ](https://www.programiz.com/)[/li]
  [li][Sharp, Helen; Preece, Jennifer; & Rogers, Yvonne (2019). Interaction Design: Beyond Human-Computer Interaction (5th Ed.). Wiley.](https://www.wiley.com/en-ca/Interaction+Design:+Beyond+Human+Computer+Interaction,+5th+Edition-p-9781119547259)[/li]
  [li]HaghighatiMaleki, A. (n.d.). CS4474 Hci. UWO. London, Ontario; OWL. [/li]
  [li]GeeksforGeeks. (2023, February 17). How to create a simple JavaScript quiz ? GeeksforGeeks. Retrieved April 6, 2023, from https://www.geeksforgeeks.org/how-to-create-a-simple-javascript-quiz/ [/li]
  [li]How to - image magnifier glass. How To Create an Image Magnifier Glass. (n.d.). Retrieved April 6, 2023, from https://www.w3schools.com/howto/howto_js_image_magnifier_glass.asp [/li]
  [li] Home Image BST: https://miro.medium.com/v2/resize:fit:976/0*87ArmAxh9T5Ns3Um.gif [/li]
  [li] Home Image AVL: https://wkdtjsgur100.github.io/images/posts/rotation.gif [/li]
  [li] Home Image RBT: https://upload.wikimedia.org/wikipedia/commons/6/66/Red-black_tree_example.svg [/li]
  [li] Home Image B+: https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/Bplustree.png/400px-Bplustree.png [/li]
  [li]Learn BST Image 1: https://cdn.programiz.com/sites/tutorial2program/files/bst-vs-not-bst.png [/li]
  [li]Learn BST Image 2: https://blog.penjee.com/wp-content/uploads/2015/11/binary-search-tree-sorted-array-animation.gif[/li]
  [li]Learn BST Image 3: https://daankolthof.com/wp-content/uploads/2020/01/BST-insertion-animation.gif[/li]
  [li]Learn BST Image 4: https://www.ideserve.co.in/learn/img/bstDelete_0.gif[/li]
  [li]Learn BST Image 5: https://cdn.programiz.com/sites/tutorial2program/files/bst-delete-3.png[/li]
  [li]Learn BST Image 6: https://cdn.programiz.com/sites/tutorial2program/files/bst-delete-4.png[/li]
  [li]Learn BST Image 7: https://cdn.programiz.com/sites/tutorial2program/files/bst-delete-5.png[/li]
  [li]Learn B+ Image 1: https://cdn.programiz.com/sites/tutorial2program/files/search-tree.png[/li]
  [li]Learn B+ Image 2: https://cdn.programiz.com/sites/tutorial2program/files/insert-2-b+tree.png[/li]
  [li]Learn B+ Image 3: https://cdn.programiz.com/sites/tutorial2program/files/insert-3-b+tree.png[/li]
  [li]Learn B+ Image 4: https://cdn.programiz.com/sites/tutorial2program/files/insert-4-b+tree.png[/li]
  [li]Learn B+ Image 5: https://cdn.programiz.com/sites/tutorial2program/files/insert-5-b+tree.png[/li]
  [li]Learn B+ Image 6: https://cdn.programiz.com/sites/tutorial2program/files/deletion-1-b+tree.png[/li]
  [li]Learn B+ Image 7: https://cdn.programiz.com/sites/tutorial2program/files/deletion-2-b+tree.png[/li] 
  [li]Learn B+ Image 9: https://cdn.programiz.com/sites/tutorial2program/files/deletion-4-b+tree.png[/li]
  [li]Learn B+ Image 10: https://cdn.programiz.com/sites/tutorial2program/files/deletion-5-b+tree.png[/li]
  [li]Learn B+ Image 11: https://cdn.programiz.com/sites/tutorial2program/files/deletion-6-b+tree.png[/li]
  [li]Learn RB Image 1: https://algorithmtutor.com/images/RBTreeExample.png[/li]
  [li] Learn AVL Images: "https://cdn.programiz.com/sites/tutorial2program/files/avl-tree"[/li]
  [li]Learn AVL Image 7: https://wkdtjsgur100.github.io/images/posts/rotation.gif[/li]
  [li]Learn RB Images: https://algorithmtutor.com/images/RBTreeExample.png[/li]
  [li]Learn RB Image: https://wkdtjsgur100.github.io/images/posts/rotation.gif[/li]
  [li]Learn RB Video 1: https://www.youtube.com/embed/A3JZinzkMpk[/li]
  [li]Learn RB Video 2: https://www.youtube.com/embed/lU99loSvD8s[/li]
  [li]Youtube Video: Red-black trees in 6 minutes — Delete Fixes - Link is broken[/li]
[/ol]